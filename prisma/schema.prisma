generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(uuid())
  name           String
  cpf            String               @unique
  email          String               @unique
  phone          String               @unique
  password       String
  courses        Course[]             @relation("UserCourses")
  commentaries   Commentary[]
  UserCourse     UserCourse[]
  watchedClasses UserWatchedClasses[]
  UserMetrics    UserMetrics[]
  certificates   Certificate[]
  isAdmin        Boolean?             @default(false)
}

model Course {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String
  duration     Int
  cover_url    String
  users        User[]        @relation("UserCourses")
  modules      Module[]
  commentaries Commentary[]
  UserCourse   UserCourse[]
  classes      Class[]
  UserMetrics  UserMetrics[]
  certificates Certificate[]
}

model Module {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  duration    Int
  cover_url   String?
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id])
  classes     Class[]
}

model Tutor {
  id      String  @id @default(uuid())
  name    String  @unique
  bio     String
  classes Class[]
}

model Class {
  id             String               @id @default(uuid())
  name           String               @unique
  description    String
  duration       Int
  url            String
  moduleId       String
  module         Module               @relation(fields: [moduleId], references: [id])
  tutorId        String
  tutor          Tutor                @relation(fields: [tutorId], references: [id])
  courseId       String
  course         Course               @relation(fields: [courseId], references: [id])
  commentaries   Commentary[]
  watchedByUsers UserWatchedClasses[]
}

model Commentary {
  id       String @id @default(uuid())
  content  String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  classId  String
  class    Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model UserCourse {
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model AppVersion {
  id                 String  @id @default(uuid())
  appVersion         String
  availableOniOS     Boolean
  availableOnAndroid Boolean
}

model UserMetrics {
  id                            String  @id @default(uuid())
  userId                        String
  user                          User?   @relation(fields: [userId], references: [id])
  courseId                      String
  course                        Course? @relation(fields: [courseId], references: [id])
  courseTotalClasses            Int
  totalWatchedClasses           Int
  totalWatchedClassesPercentage Int
}

model UserWatchedClasses {
  userId    String
  classId   String
  watchedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([userId, classId])
}

model Certificate {
  id              String   @id @default(uuid())
  userId          String
  courseId        String
  certificate_url String
  concludedAt     DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
  course          Course   @relation(fields: [courseId], references: [id])
}
